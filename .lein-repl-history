(get [] 0)
(+ (get [] 0) 1)
(+ (get [] 0)
(sum [1 2])
quit
(sum [1 2])
(+ [1 2])
(number? nil)
(or nil 0)
(autotest)
(use 'midje.repl)
(autotest)
(autotest :pause)
(autotest :resume)
(load-facts)
false
(autotest :resume)
(autotest)
(autotest true)
(autotest :resume)
(autotest)
(check-facts)
(map + [1 2])
(map [1 2] +)
(map [1 2] (+ a 1))
(map [1 2] (+ _ 1))
(defn [i] (+ i 1))
(defn plus1 [i] (+ i 1))
(map plus1 [1 2])
(sum [1 2])
(reduce [1 2] 1)
(reduce [1 2])
(reduce + [1 2])
(check-facts)
(conj nil "<3")
(conj [] "<3")
(conj [1 2] "<3")
(check-facts)
(defn s [a b]
[(first a) (first b)])
(s [1 2] [3 4])
(third [1 2 3])
(let [a [1 2 3]]
(third a))
(defn s [a b]
[(third a) (third b)])
(check-facts)
(use 'midje.repl)
(check-facts)
(load-facts)
(check-facts)
(use 'structured-data)
(rectangle (point 1 1) (point 2 2))
(height (rectangle (point 1 1) (point 2 2)))
(height (rectangle (point 1 1) (point 5 1)))
(height (rectangle [1 1] [5 1]))
(use 'structured-data)
(height (rectangle [1 1] [5 1]))
(check-facts)
quit
(use 'midje.repl)
(autotest)
(check-facts)
quit
(use 'structured-data)
(point 1 1)
(<= (point 1 1) (point 2 2))
quit
(use 'midje.repl)
(autotest)
(check-facts)
(use 'structured-data)
(spiff [1 2 3])
(defn f [v]
  (let [[x y z] v]
   (reduce + ((or x 0) (or z 0)))))
(f [1 2 3])
(defn f [v]
  (let [[a b c] v]
   (+ (or x 0) (or z 0))))
(defn f [v]
  (let [[a b c] v]
   (+ (or a 0) (or c 0))))
(f [1 2 3])
(check-facts)
quit
(def book {:title "The City and the City"
           :authors [{:name "China Miville", :birth-year 1972}]})
(:title book)
(count book)
(def china {:name "China Miville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors [china]})
(def wild-seed {:title "Wild Seed", :authors [octavia]})
(def embassytown {:title "Embassytown", :authors [china]})
(def little-schemer {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(defn title-length [book]
(count (:title book)))
(title-length cities)         ;=> 21
(title-length wild-seed)      ;=> 9
(title-length little-schemer) ;=> 18
quit
(def little-schemer {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(def book {:title "The City and the City"
           :authors [{:name "China Miville", :birth-year 1972}]})
(:authors book)
(:foo book)
(count (:foo book))
quit
(def book {:title "The City and the City"
           :authors [{:name "China Miville", :birth-year 1972}]})
(count (:foo book))
(count nil)
(use 'clojure.string
)
(trim nil)
(trim "")
(trim 1)
(book)
book
(use 'clojure.pprint)
(print-pretty book)
(pp book)
pp
book
pp
(print-table book)
(clojure.pprint/pprint *map*)
(clojure.pprint/pprint book)
book
(clojure.pprint/pprint book)
pp
(clojure.pprint/pprint book)
(pprint book)
(pp book)
(pprint book)
(print-table book)
exit
(use 'structured-data)
(def china {:name "China Miville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors [china]})
(def wild-seed {:title "Wild Seed", :authors [octavia]})
(def embassytown {:title "Embassytown", :authors [china]})
(def little-schemer {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(add-author little-schemer {:name "Gerald J. Sussman"})
(assoc {:foo 1} little-schemer)
(assoc little-schemer :foo 1)
(assoc little-schemer :authors (assoc (:authors little-schemer) 2 {:name "fred"}))
(:authors little-schemer)
(conj (:authors little-schemer) {:name "barbar"})
exit
(nil? 0)
(nil? nil)
(use 'structured-data)
(auto-test)
(autotest)
(check-facts)
(load-facts)
exit
(* "*")
(* "*" 2)
(* 2 "*")
(conj "*" nil)
(conj nil "*")
(str "*" "*")
(defn aa [s]
)
(defn aa [times s]
(let [add-s (fn [i x] (cond (<= i 0) x
(<= i 1) x
:else (add-s (- i 1) (str x x))))]
(add-s times s)))
(range 1 4)
(range 1 4 "*")
(map "*" (range 1 4))
(apply concat "*" (range 1 4))
(repeat 5 "*")
(appy str (repeat 5 "*"))
(apply str (repeat 5 "*"))
(apply str (repeat 0 "*"))
(dec 2)
exit
(use 'structure-data)
(use 'structured-data)
(my-repeat 1 "foo")
(my-repeat 0 "foo")
(my-repeat 3 "foo")
[1 2 3]
(apply <= [1 2 3])
(apply <= [1 2 1])
( <= [1 2 1])
(apply <= [1 2 1])
(auto-test)
(use 'midje.repl)
(use 'structured-data)
(auto-test)
(check-facts)
(load-facts)
(set [1 2 3])
(set [1 2 3 1])
(set (1 2 3 1))
(set [1 2 3 1])
#{1 2 3 1}
(check-facts)
(use 'structured-data)
(check-facts)
(use 'structured-data)
(load-facts)
(check-facts)
(def china {:name "China Miville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors [china]})
(def wild-seed {:title "Wild Seed", :authors [octavia]})
(def embassytown {:title "Embassytown", :authors [china]})
(def little-schemer {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(def books [cities, wild-seed, embassytown, little-schemer])
(assoc cities :authors "foo")
(assoc cities :authors (set (:authors cities)))
(load-facts)
(use 'structured-data)
(check-facts)
(use 'structured-data)
(check-facts)
(use 'structured-data)
(load-facts)
(check-facts)
(load-facts)
(check-facts)
(map :author books)
(map :authors books)
(load-facts)
(check-facts)
(load-facts)
(check-facts)
(use 'structured-data)
(def china {:name "China Miville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(map author books)
(map authors books)
(map :authors books)
(map :name (map :authors books))
(apply :name (map :authors books))
(load-facts)
(check-facts)
(map authors books)
(map :authors books)
(authors books)
(cljure.set/union (authors books))
(clojure.set/union (authors books))
(apply :name (authors books))
(map :name (authors books))
(set (map :name (authors books)))
(load-facts)
(check-facts)
quit
(use 'structured-data)
(load-facts)
(use 'midje.repl)
(load-facts)
(check-facts)
(load-facts)
(str "foo" "bar")
(coljure.string/join ["foo" "bar"])
(clojure.string/join ["foo" "bar"])
(clojure.string/join ["foo" "bar"] " ")
(clojure.string/join ["foo" "bar"])
(clojure.string/join " " ["foo" "bar"])
(format "Pad with leading zeros %07d" 5432)
(format "Pad with leading zeros %s" "foo")
(format "%s %s" "foo")
(format "%s %d" "foo" 1)
(format "%s (%d - %d)" "foo" 1999 2007)
(format "(%d - %d)" 1999 2007)
(format "(%d - %d)" 1999 nil)
(format "(%d - %d)" 1999 2007)
(format "(%d - %d)" (or 1999 "") (or nil "")
)
(format "(%s - %s)" (or 1999 "") (or nil ""))
(clojure.string/join " " ["foo" nil])
(clojure.string/trim (clojure.string/join " " ["foo" nil]))
(check-facts)
(load-facts)
(check-facts)
exit
(use 'midje.repl)
(load-facts)
(interpose "," ["foo" "bar"])
(apply str (interpose "," ["foo" "bar"]))
(load-facts)
('structure-data :replace)
(load-facts)
(check-facts)
(apply str (interpose "," [1 2]))
exit
(def china {:name "China Miville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
('structure-data :replace)
(use 'midje.repl)
(author->string felleisen)
(defn author->string [author]
  (clojure.string/trim (clojure.string/join " " [(:name author) (year-range author)])))
(defn year-range [author]
  (cond
   (:birth-year author) (format "(%s - %s)" (or (:birth-year author) "") (or (:death-year author) ""))
   :else ""))
(defn author->string [author]
  (clojure.string/trim (clojure.string/join " " [(:name author) (year-range author)])))
(author->string felleisen)
(map author->string #{felleisen octavia})
(load-facts)
exit
(use 'midje.repl)
(load-facts)
(apply str (interpose ", " ["foo" "a, b"]))
(apply str (interpose ", written by " ["foo" "a, b"]))
(load-facts)
(check-facts)
(format "%d book" 1)
(str [1, 2])
(apply str [1, 2])
(apply str (interpose ", written by " ["foo" "a, b"]))
(load-facts)
(check-facts)
(load-facts)
(check-facts)
(load-facts)
(check-facts)
(load-facts)
(check-facts)
(filter odd? [1 2 3])
(load-facts)
(check-facts)
(load-facts)
(check-facts)
(flatten [[123] [456]])
(flatten [[123] [456] nil])
(def china {:name "China Miville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
little-schemer
(:authors little-schemer)
(filter (fn [author] (= (:name author) "Daniel Friedman")) (:authors little-schemer))
(load-facts)
(check-facts)
(empty? [])
(load-facts)
(check-facts)
(first [])
(load-facts)
(check-facts)
(nil? nil)
(nil? 0)
(contains? [1 2 3] 3)
(contains? 3 [1 2 3])
(contains? [1 2 3] 3)
(contains? {:foo 1} :foo)
(load-facts)
(check-facts)
(filter-not odd? [1 2 3])
(load-facts)
(check-facts)
(load-facts)
(check-facts)
(-> not
nil?
first
[1 2]
)
(-> [1 2]
first
not 
nil?
)
(-> [1 2]
first
nil?
not)
(-> []
first
nil?
not)
(load-facts)
(check-facts)
quit
